openGL（GLSL,OpenGL Shading Language）:
  ref：docs.GL
  概念：
    用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）
    需要选择一门语言来调用，多数使用C++
  数学：
    常用数学公式：
      https://www.cnblogs.com/makeamericagreatagain/p/14311269.html
    线性代数
    几何
    三角学
  命名：
    接口：
      给予开发公司命名标识符：
        例如：
          NVIDIA:NV
      多个供应商认同：
        EXT
      标准拓展：
        ARB
  在线：
    https://shdr.bkcore.com/
  
  教程：
    2D阴影：
      https://www.shadertoy.com/view/4dfXDn
    顶点变换：
      https://www.3dgep.com/understanding-the-view-matrix/
        矩阵：
          https://blog.csdn.net/u012501459/article/details/12945149
    雨水效果：
      https://seblagarde.wordpress.com/2013/01/03/water-drop-2b-dynamic-rain-and-its-effects/
    PBR:
      教程：
        https://learnopengl-cn.github.io/07%20PBR/01%20Theory/
        原文：
          https://learnopengl.com/PBR/Theory
    水波纹（sin+ 格斯特纳 波浪 “Gerstner”）：
      https://catlikecoding.com/unity/tutorials/flow/waves/

    2d：
      https://www.udemy.com/course/making-glsl-shaders-for-2d-game-development/
      13美元
      https://youtu.be/NQ-g6v7GtoI
    
    渲染管线：
      https://developer.arm.com/documentation/102479/0100/Efficient-render-passes

    全栈：
      https://learnopengl.com/Introduction
      进度：
        入门-openGL
      笔记：
        入门：
          OpenGL：
            其他：
              OpenGL仅仅是一个规范
              OpenGL库由显卡制造商编写
              当 OpenGL 显示出它不应该出现的奇怪行为时，这很可能是显卡制造商（或开发/维护库的人）的错。
              OpenGL规范文档:
                https://www.khronos.org/registry/OpenGL/specs/gl/glspec33.core.pdf
              使用最新版本的 OpenGL 的功能时，只有最现代的显卡才能运行您的应用程序。
            扩展
              开发人员可以直接拓展opengl
            状态机
               OpenGL 本身就是一个大型状态机 ！
               OpenGL的状态 通常被称为OpenGL语境.
            对象
              OpenGL 库是用 C 编写的，并允许在其他语言中进行许多派生，但它的核心仍然是一个 C 库。

          创建一个窗口：
          你好窗口：
          你好三角：
            在 OpenGL 中，一切都在 3D 空间中，但屏幕或窗口是一个 2D 像素阵列，因此 OpenGL 的大部分工作是将所有 3D 坐标转换为适合您屏幕的 2D 像素。
            图形管道可以分为两大部分：
            第一部分将您的 3D 坐标转换为 2D 坐标，
            第二部分将 2D 坐标转换为实际的彩色像素。
            几乎所有情况，我们只需要使用顶点和片段着色器。
            顶点输入：
              输入顶点数据
              与通常的屏幕坐标不同，正 y 轴点在向上方向，(0,0)坐标位于图形的中心，而不是左上角。最终，您希望所有（转换后的）坐标都位于此坐标空间中，否则它们将不可见。
              然后您的 NDC 坐标将转换为 屏幕空间坐标 通过 视口变换 使用您提供的数据 视口. 然后将生成的屏幕空间坐标转换为片段作为片段着色器的输入。

    斯坦福大学公开课:
      可穿戴设备：
        https://web.stanford.edu/class/ee367/

      交互图形学：
        https://web.stanford.edu/class/cs248/lectures.html
      
      图形成像：
       https://web.stanford.edu/class/cs148/lectures.html

      计算机呈像显示：
        https://web.stanford.edu/class/ee367/

    大V:
      Ned Makes Games
      Sebastian Lague
      Ben Cloward
      Freya Holmér
      Catlike Coding
      严令琪
      The Cherno 
      Cyan
      Ghislain Girardot
      Chayan Vinayak
      https://minionsart.github.io/tutorials/
      ref:
        https://www.patreon.com/m/78443/membership
        https://www.twitch.tv/videos/1213264324

    
    变量：
      https://colin1994.github.io/2017/11/11/OpenGLES-Lesson04/
  
  关键环节：
    关键字：
      blit：
        含义是内存中图像的位块传输
    深度测试：
      https://learnopengl-cn.readthedocs.io/zh/latest/04%20Advanced%20OpenGL/01%20Depth%20testing/
    投影阴影：
      https://learnopengl-cn.readthedocs.io/zh/latest/05%20Advanced%20Lighting/03%20Shadows/02%20Point%20Shadows/
      计算方式：  
        投影矩阵：
          Determinant 矩阵 （由矩阵表示的线性映射）
        公式归纳描述：
    
            


            
  其他：
    二进制着色器:
      为了反复读取代码，在编译一次后产生的二进制文件保存，下次直接读取二进制着色器
  mac：
    vscode环境配置:
      https://zhuanlan.zhihu.com/p/151384233
   
openGL ES(OpenGL for Embedded Systems ):
    概念：
      openGL的子集，专门用于嵌入式设备
    版本及功能：
      1.0=
        四边形和多边形渲染基元
        texgen，线和多边形点画
        多重采样
      +=1.1
        支持多纹理
        支持mipmap（图像的缩放预存储）
        顶点缓冲区
        状态查询
        用户剪辑平面
        点渲染
      +=2.0
        可编程的渲染管道
      +=3.0
        渲染管道的多项增强功能可加速高级视觉效果
        ETC2/EAC 纹理压缩 统一平台纹理集
        支持整数和32 位 浮点运算
        支持更多纹理：浮点纹理、3D 纹理、深度纹理、顶点纹理、NPOT 纹理、R/RG 纹理、不可变纹理、2D 阵列纹理、swizzles、LOD和mip 级别钳位、无缝立方体贴图和采样器对象
        纹理和渲染缓冲区格式确定
      +=3.1
        计算着色器 为了 cpu gpu 更紧密合作
        独立的顶点和片段着色器
        间接绘制命令
      +=3.2
        几何和曲面细分着色器可在 GPU 上高效处理复杂场景
        浮点渲染目标可提高更高精度计算操作的灵活性
        ASTC 压缩以减少用于处理纹理的内存占用和带宽
        用于复杂合成和处理多种颜色附件的增强混合
        高级纹理目标，例如纹理缓冲区、多样本二维数组和立方体贴图数组
        调试和健壮性功能可实现更轻松的代码开发和安全执行。
   《 OpenGL ES 3.0编程指南 》：
内置函数：
  ceil:
    找到大于或等于参数的最接近的整数
  step：
    拆分步径
  smoothStep：
    差值步径
  floor:
    只输出整数
  Sign：  
    只传出1 0 -1
    可以用于辨别朝向
  ref：
    https://blog.csdn.net/hgl868/article/details/7876257
通用概念：
  几何遮蔽项(Geometry Occlusion Term):
    反射模型中的一个重要组成部分,它描述了物体表面微平面之间的相互遮挡效果。
    通过合理计算几何遮蔽项,可以得到更加逼真的渲染效果。
  ComputeShader计算着色器：
    it
  纹理缩放：
    放大：
      基于纹理映射，将原像素映射到放大图像的对应像素位置，以原像素在放大图像上的相对位置，对剩余未填充像素的部分进行填充，如果用liner模式，就会与剩余像素做差值，如果选择nearst模式，就会选择临近的像素进行复制。
    缩小：  
      基于mipmap(GPU加速运算)对图像进行缩小，每四个像素缩放成一个像素,如果选择liner就会产生差值，如果选择nearst就会选择临近像素直接赋值,进行纹理映射。
    ref：https://webgl2fundamentals.org/webgl/lessons/webgl-3d-textures.html
  Framebuffer Object(FBO):
    帧缓冲区对象是OpenGL 对象，它允许创建用户定义的帧缓冲区。使用它们，可以渲染到非默认帧缓冲区位置，从而在不干扰主屏幕的情况下进行渲染。
  Element Buffer Objects(EBO):
    元素缓冲对象：
      存储重复绘制的顶点
  Vertex Array Objects(VAOs):
    顶点数组对象:
      存储完整渲染对象的信息
  Vertex Buffer Objects(VBOs):
    顶点缓冲区对象:
      一个描述顶点的坐标，另一个描述与每个顶点关联的颜色。VBO 还可以存储法线、texcoords、索引等信息。
  GPU的单元:
    SM：
      shader复杂度决定了sm吞吐量
  D3D12：
    约等于DX12是图形API
  Vulkan API:
    更高级的图形api支持光追之类的高级功能，在任何设备上都可以支持（ps xbox switch）
  ARRAY_BUFFER：
    一个面片由8个byte组成，2个三角形，6个顶点，2个法线向量 一个byte存储0-256
  dot：
    点积 ：
      输入两个向量 输出一个数字
      计算投影
      例子：
        向量 (3, 2) 和 (2, 4)： 3*2 + 2*4 = 14。
      意义：
        1.找出两个点之间 相对Y轴的位置关系（之前还是之后）
        2.向量方向：结果为 0 代表垂直 结果为 + 代表同向 结果为 - 代表相反
        3.计算对象与角色的角度 acos(x · y / ‖x‖ * ‖y‖) * 180 / pi
  向量相加：
    几何意义：
      1.收尾相接的三角形
  向量*数字：
    几何意义：
      +：
        延长
      -：
        反向
  max：
    返回两个值中较大的一个
  normalize:
    ref:
      http://www.fundza.com/vectors/normalize/index.html
    
    归一化后的向量.x = x/向量长度
    x = x(old) / sqrt((ax * ax) + (ay * ay) + (az * az))
    y = y(old) / sqrt((ax * ax) + (ay * ay) + (az * az))
    z = z(old) / sqrt((ax * ax) + (ay * ay) + (az * az))
  mod：
    取余
操作：

  PBR:
    cook torrance brdf model 库克光照模型:
      kanziPBR:
        https://substance3d.adobe.com/tutorials/courses/the-pbr-guide-part-1
      ref:
        https://graphicscompendium.com/gamedev/15-pbr
        https://garykeen27.wixsite.com/portfolio/cook-torrance-shading
      背景：
        1982 年，Robert Cook 和 Kenneth Torrance 发表了一个反射模型，该模型比 Phong 和 Blinn-Phong 模型更准确地代表了光反射的物理现实。
  结构体：
    https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)
  可视化顶点法线：(TODO)
    https://learnopengl.com/Advanced-OpenGL/Geometry-Shader

  光照：
    计算反射角：
      reflect 
    锥形光照：
      高光.0 =  max(0,点乘(归一化(视线法线),归一化(视线方向+光照方向)));
      锥光效果 = 点乘(归一化的 锥光方向 , 归一化的 锥光视线方向);
      光照衰减 = 锥光效果 / (光照衰减.x + 光照衰减.y * 锥光视线方向.xyz  + 光照衰减.z * 锥光视线方向.xyz);
      光照 = (漫反射.rgb * 光照点乘法线.0 + 镜面反射.rgb * 高光.0) * 光照衰减 * 灯光颜色;

      浮点数：光照点乘法线

  计算两点之间的距离：
    √((vx-kx)²+(vy-ky)²+(vz-kz)²)
    例子：
      v = (0, 0, 0) 和 k = (3, 4, 0)
      disVK = √((0–3)²+(0–4)²+(0–0)²)
      disVK = 5
    代码：
      public float Square(float value) 
      { 
          return value * value; 
      } 

      public float Distance(Vector3 from, Vector3 to) 
      { 
          return Mathf.Sqrt( 
              Square(from.x - to.x) + 
              Square(from.y - to.y) + 
              Square(from.z - to.z) 
          ) ; 
      } 

  坐标转换：

      矩阵*位置

      例如：
        世界坐标 到 相机坐标
        物体坐标->世界坐标->相机坐标：
          世界中的位置 = 物体到世界的矩阵 * 物体位置
          相机中的位置 = 世界到相机的矩阵 * 世界中的位置
  
  矩阵变化：
    C++中的预制矩阵：
      正交：
        Mat Mat::getOrthographic(float left, float right, float top, float bottom, float near, float far) {
            Mat newmat;
            newmat.data[ind1(0, 0)] = 2.0f / (right - left);
            newmat.data[ind1(1, 1)] = 2.0f / (top - bottom);
            newmat.data[ind1(2, 2)] = 2.0f / (near - far);
            newmat.data[ind1(0, 3)] = (left + right) / (left - right);
            newmat.data[ind1(1, 3)] = (bottom + top) / (bottom - top);
            newmat.data[ind1(2, 3)] = (far + near) / (far - near);
            return newmat;
        }
      透视：
        Mat Mat::getPerspective(float fov, float aspectratio, float near, float far) {
            Mat newmat;
            newmat.data[ind1(0, 0)] = (1.0f / tan((0.5f * fov) * (3.141519 / 180.0f))) / aspectratio;
            newmat.data[ind1(1, 1)] = 1.0f / tan((0.5f * fov) * (3.141519 / 180.0f));
            newmat.data[ind1(2, 2)] = (near + far) / (near - far);
            newmat.data[ind1(3, 2)] = -1.0f;
            newmat.data[ind1(2, 3)] = (2.0f * near * far) / (near - far);
            return newmat;
        }

      ref：https://stackoverflow.com/questions/48375568/custom-matrices-opengl-shaders
    方便计算用的 4X4 矩阵：
      4X4:
        1.如果不用4x4没法获得 严格三角型
        2. 也是为了复合变换
      位移:
        1 0 0 Tx
        0 1 0 Ty
        0 0 1 Tx
        0 0 0 1
      缩放:
        x 0 0 0
        0 y 0 0
        0 0 z 0
        0 0 0 1
      旋转:
        沿x：
          1 0 0 0
          0 c -s 0
          0 s c 0
          0 0 0 1
        沿y：
          c 0 s 0
          0 1 0 0
          -s 0 c 0
          0 0 0 1
        沿z：
          c -s 0 0
          s c 0 0
          0 0 1 0
          0 0 0 1

      指定轴旋转：
        pow(x,2)(1-cos)+cos, xy(1-cos)-z*sin, xz(1-cos)+y*sin,0
        xy(1-cos)+z*sin , pow(y,2)(1-cos)+cos,zy(1-cos)-x*sin,0
        xz(1-cos)-y*sin,yz(1-cos)-x*sin,pow(z,2)(1-cos)+cos,0
        0,0,0,1
      操作：
        逆矩阵：
          inverse();
  向量矩阵变化：
    https://www.cnblogs.com/caster99/p/4787988.html
    http://www.songho.ca/opengl/gl_normaltransform.html
  2D矩阵变化：
    ref：https://learnopengl.com/Getting-started/Transformations
  旋转方式:
    欧拉角：
      万象锁：
        顺xyz的层级顺序，当xy呈现-90度时出现（3d动画、maya中可以复现）
    四元数:
      化简公式：
        1-2*pow(y,2)-2*pow(z,2)    2xy -2sz  2xz + 2sy   0
        2xy + 2sz                  1-2*pow(x,2)-2*pow(z,2)
        公式参考：
          http://www.songho.ca/opengl/gl_quaternion.html
          https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/
      文档参考
        https://krasjet.github.io/quaternion/quaternion.pdf

      视频参考
        https://www.bilibili.com/video/BV1SW411y7W1
    矩阵旋转

  降低饱和度 Desaturation：
    vec3 color = texture2D( sampler , uv ).rgb;
    vec3 gray = vec3( dot( color , vec3( 0.2126 , 0.7152 , 0.0722 ) ) );
    fragColor = vec4( mix( color , gray , desaturationFactor ) , 1.0 );

  贝塞尔曲线：
    https://ciechanow.ski/drawing-bezier-curves/
    https://youtu.be/aVwxzDHniEw
    
    实现：
    https://community.khronos.org/t/trouble-using-tessellation-to-draw-cubic-bezier-curves/74817

  比尔定律（光线穿透折射） Beer's law:
    ref：
      https://byjus.com/physics/derivation-of-beer-lambert-law/
  卷积降噪：
    ref：
      https://segmentfault.com/a/1190000037749983
  
  本地矩阵：
      mat4 objectSpaceMatrix()
      {
          mat4 objSpaceMat  = mat4(
            vec4 ( 0.5,  0.5, 0.5 , 1.0),
              vec4  (-0.5,  0.5, 0.5, 1.0),
              vec4  ( 0.5, -0.5, 0.5, 1.0),
            vec4   (-0.5, -0.5, 0.5, 1.0)
          );
          return objSpaceMat;
      }
    ref：
      https://stackoverflow.com/questions/16225815/object-world-camera-and-projection-spaces-in-opengl

  置换贴图：
     texture displacements
  
  噪点图：
    
    柏林噪点：
      Perlin noise:
        TBP CreatWave(
          float _Amplitude,
          float _Wavelength,
          float _Speed,
          vec2 _Direction,
          vec3 posAdd,
          vec3 tangent,
          vec3 binormal
        )
        {
            TBP tbp;

            //vertex
                
                float k = 2.0 * PI / _Wavelength;
                //地球重力9.8
                float c = sqrt(9.8/k);
                vec2 d = normalize(_Direction);
                float f = k * (dot(d,posAdd.xz) - c * kzTime * _Speed);
                float a = _Amplitude/k;
                

                posAdd.x = d.x * (a * cos(f));
                posAdd.y = a * sin(f);
                posAdd.z = d.y * (a * cos(f));
            //旋转法线
            tangent += vec3(
                1.0 - d.x*d.x*(_Amplitude*sin(f)),
                d.x * (_Amplitude*cos(f)),
                -d.x * d.y * (_Amplitude*sin(f))
                );
            binormal += vec3(
                -d.x * d.y * (_Amplitude * sin(f)),
                d.y * (_Amplitude * cos(f)),
                1.0 - d.y * d.y * (_Amplitude * sin(f))
            );

            tbp.position = posAdd;
            tbp.tangent = tangent;
            tbp.binormal = binormal;
            return tbp;
        }
    应用：
      顶点噪点：
        地形：
          https://www.redblobgames.com/maps/terrain-from-noise/
    ref:
      https://www.clicktorelease.com/blog/vertex-displacement-noise-3d-webgl-glsl-three-js/

  RayMarching:
    硬盘中的计算：
      Signed distance functions(SDF):
        用于创建3d形状最通用的方式：
          用函数描绘物体：
            球体：
              a点 到 球心r的距离：
                存在3中可能：
                  length(A) - r < 0;
                  length(A) - r = 0;
                  length(A) - r > 0;
              半径为123的球体：
                float sphereSDF(float3 p) {     return length(p) - 1.0; }
    渲染：
      为了减少计算量：
        光线不会全部反射到人眼，所以从人眼反推光线会大大减少计算量
    
    rayMarchingToZbuffer:
      http://adrianb.io/2016/10/01/raymarching.html
      https://github.com/Flafla2/Generic-Raymarch-Unity
      https://medium.com/@calebleak/raymarching-voxel-rendering-58018201d9d6
  
  波纹：
    格斯特纳波浪 Gerstner Waves：
      用一个圆来描述波纹运动
      ref:
        https://en.wikipedia.org/wiki/Trochoidal_wave
      原理：
        顶点：
          https://blog.csdn.net/weixin_44749041/article/details/122424954
        法线：
          空间曲线微分：
            https://www.sohu.com/a/381434358_664523
          全微分方程的公式

  解算：
    unity布料解算：
      https://github.com/SebLague/Cloth-and-IK-Test
      https://github.com/Ninjajie/Fusion#cloth-plugin-user-guide
    GAMES-Webinar物理解算课程：
      00简介：
        知识准备：
          数学：
            线性代数
            微积分
            编程
      ref： https://www.bilibili.com/video/BV12Q4y1S73g?share_source=copy_web
    布料解算：
      关键词：
        physics based animation(Kenney Erleben)
          共轭梯度法：
            https://youtu.be/eAYohMUpPMA
        
      ref详细见：
        TSP_CSSE_45194(pdf)
        算法库：
          https://github.com/mmmovania/opencloth

  实时光散射效应：
    ref：
      https://fabiensanglard.net/lightScattering/
    优点：
      易于设置
      上帝之光
    缺点：
      采样数高，消耗片元的算力
      不能使用预计算来投射阴影
  
  视差贴图 Parallax Mapping：
    原理：
      反向法线贴图
    价值：
      法线贴图只能模拟明暗，视差贴图可以模拟遮挡
    实现：  
      blender实现：
        教程：
          https://youtu.be/iSQGp6zHdyM
        展示：
          https://youtu.be/7k0e0JnPcH8
    ref：
      https://blog.csdn.net/HappyKocola/article/details/72812081
      https://www.artstation.com/blogs/martinwiddowson/ZP4V/interior-mapping-and-building-tile-able-rooms-ue4

  法线矩阵：
    世界空间到相机空间转变：
      求法：
        相似矩阵：
          http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/
        特例：
          https://lxjk.github.io/2017/10/01/Stop-Using-Normal-Matrix.html
  
  平铺着色器：
    ref:
      https://www.artstation.com/blogs/martinwiddowson/qwoe/the-making-of-me-myself-die-part-1
算法:
  沃利噪声/噪点 worley noise：
    概念：
      是由引入的噪声函数 史蒂文·沃利 在1996年。 计算机图形学 它用于创建 程序纹理,即自动以任意精度创建的纹理，不必手动绘制。 Worley噪声接近模拟石头，水或生物细胞的纹理。
    实现思路：
      基本思想是获取空间中的随机点（二维或3维），然后对空间中的每个位置取距离dñ 到 ñ第三近点（例如第二近点），并使用它们的组合来控制颜色信息（请注意dn + 1 > dñ）。更确切地说：
        在组织为网格单元的空间中随机分布特征点。实际上，这是在没有存储的情况下即时完成的（例如 程序噪声）。最初的方法考虑到每个单元的可变数量的种子点，以模仿Poisson分布，但是许多实现方式只是一个。
        在运行时，提取距离dñ 从给定位置到 ñ最接近的种子点。可以通过访问当前单元格及其邻居来有效地完成此操作。
        噪音 宽（x） 是正式的距离矢量，加上可能的相应种子编号，用户组合在一起即可产生颜色。百科全书  site:wikizhzh.top
调试：
  GLTF代码viewer：
    
    ref：
      https://github.com/patriciogonzalezvivo/glslViewer/releases/tag/2.0.0

  Nsight:
    配置：
      https://developer.nvidia.com/nsight-tools-visual-studio-integration
    使用手册：
      https://docs.nvidia.com/nsight-graphics/UserGuide/
    坑：
      下载 Nsight Graphics
      还需要下载 Nsight Remote Monitor
      通过TCP/IP连接
      需要将应用程序选择用 英伟达的显卡 跑
    帧调试模式：
      输出数据：
        实时渲染调用
        绑定的纹理 集合图形
        Pixel History 
        识别性能瓶颈和 GPU 利用率
        离线协作和分析的 C++ Capture 导出
      使用场景：
        猜测有渲染精度和同步问题
        几何问题
        混合问题
        同步问题
      使用方法：
        查看所有资源：
          Frame Debugger > All Resources
        检查API：
          OpenglGL:
            渲染管线：
              Vtx Spec (Vertex Specification)：vertex attributes, vertex array object state, element array buffer, and draw indirect buffer.
              VS (Vertex Shader)：Vertex shader state, including attributes, samplers, uniforms
              TCS (Tessellation Control Shader)：attributes, samplers, uniforms, control state
              TES (Tessellation Evaluation Shader)：Tessellation evaluation shader state, including attributes, samplers, uniforms, evaluation state, etc.
              GS (Geometry Shader)：
              XFB (Transform Feedback)：
              Raster (Rasterizer)：Rasterizer state, including point, line, and polygon state, culling state, multisampling state, etc.
              FS (Fragment Shader)：
              Pix Ops (Pixel Operations)： blend settings, depth and stencil state
              FB (Framebuffer)：屏幕空间的渲染
            缓存：
              Textures：纹理采样器
              Images：图像缓存
              Buffers：缓冲区
              Program：程序绑定
              Pixels：像素打包和解包
        GPU CPU 消耗时间：
          Frame Debugger > API Statistics
        事件和消耗的分布关系：
          Frame Debugger > Batch Histogram
        可视化当前渲染：
          Frame Debugger > Current Target
        查看事件：
          Frame Debugger > Events
        查看几何信息：
          Frame Debugger > Geometry
          可以查看法线 点云 面 ...
        硬件统计：
          Frame Debugger > Range Profiler

    帧分析模式：
      使用场景：
        检查硬件性能瓶颈：
          受否受限于GPU，是否受限于SM约束，单元的性能
        最昂贵的绘制调用
        GPU单元使用情况
        Nsight Graphics也会稍微降低帧率

    着色器分析模式：
      （目前只支持D3D12 Vulkan）
      可以定位失速原因
      可以定位高消耗的方法
      可以看源代码
    生成 C++ 捕获：
      保存一个确定性应用程序以进行后续性能分析
      参考点
      错误报告
  renderDoc:
      good Ref: https://developers.cyberagent.co.jp/blog/archives/38917/
    
格式：
  GLB GLTF:
    .二进制文件
    .glsl
    .jpg文件
  COLLADA™ ：.dae
    定义了一个基于 XML 的模式，以便在应用程序之间轻松传输 3D 资产
    ref: 
      https://www.codeproject.com/Articles/625701/COLLADA-TinyXML-and-OpenGL
  FBX：
    格式规范：
      2006年之后属于Autodesk，其许可证和软件本身仍然完全关闭。
      FBX 有一个基于文本的 (ascii) 和一个二进制版本。
    官方开发者文档：
      3D 场景的 FBX 文件格式：
        以二进制格式保存
        储有关相机、灯光、网格、NURBS 和3D 场景的其他元素的数据。
      使用 FBX 技术做什么：
        允许访问:
          Mesh - FbxMesh
          Level of detail (LOD) groups - FbxLodGroup
          Cameras (including stereo cameras for 3D) - FbxCamera
          Lights and gobos - FbxLight, FbxGobo
          NURBS - FbxNurbs, FbxNurbsCurve, FbxNurbsSurface, FbxTrimNurbsSurface
          Texture mapping over a geometry - FbxTexture
          Material mapping over a geometry - FbxSurfaceMaterial
          Constraints - FbxConstraint
          Vertex cache animation on the control points of a geometry - FbxDeformer
          Scene settings that provide Up-Axis (X/Y/Z) and scene scaling (units) - FbxGlobalSettings, FbxAxisSystem
          Transformation data including position, rotation, scale, parent - FbxNode
          Markers - FbxMarker
          Lines - FbxLine
          Skeleton segments (root, limb, and limb node) - FbxSkeleton
          Animation curves - FbxAnimCurve
          Rest and bind poses for a list of nodes (bones and geometry) - FbxPose
          中文：
            网 -FbxMesh
            详细级别 (LOD) 组 -FbxLodGroup
            相机（包括 3D 立体相机） -FbxCamera
            灯光和图案片 - FbxLight,FbxGobo
            NURBS - FbxNurbs, FbxNurbsCurve, FbxNurbsSurface,FbxTrimNurbsSurface
            几何上的纹理映射 -FbxTexture
            几何上的材质映射 -FbxSurfaceMaterial
            约束 -FbxConstraint
            几何控制点上的顶点缓存动画 -FbxDeformer
            提供上轴 (X/Y/Z) 和场景缩放（单位）的场景设置 - FbxGlobalSettings,FbxAxisSystem
            包括位置、旋转、比例、父级的变换数据——FbxNode
            标记 -FbxMarker
            线条 -FbxLine
            骨骼节段（根、肢和肢节点） -FbxSkeleton
            动画曲线 -FbxAnimCurve
            节点列表（骨骼和几何）的休息和绑定姿势 -FbxPose
      SDK目录结构：
        根目录：
          FBX 分发目录的根目录。包含自述文件、许可证文本和卸载程序。
          samples\：
            示例程序，每个程序都在其自己的子文件夹中。包含 CMake 文件、源代码等。
          include\：
            FBX SDK 的头文件。
          lib\：
            FBX SDK 的运行时库。
      变量命名含义：
        FBX：
          大多数 FBX SDK 类名称以 Fbx 开头。示例：FbxNode, FbxScene,FbxCamera
        p：
          传递给成员函数的参数以小写“P”开头。示例：pWriteFileFormat, pScene,pFilename
        l：
          局部变量以小写“L”开头。示例：lWriteFileFormat, lScene,lFilename
        g：
          全局变量以小写“G”开头。示例：gStart, gStop,gCurrentTime
        m：
          成员数据（成员变量）以小写“M”开头。示例：mDescription, mImportname,mSelect
          
      python：
        ref：
          官方：
            https://help.autodesk.com/view/FBX/2020/ENU/?guid=FBX_Developer_Help_welcome_to_the_fbx_sdk_html
          民间：
            https://youtu.be/I3MCnmTw3V8
            https://youtu.be/xLwJFtEc2Ws

     
优化：
 1 在片段着色器中执行不必要的计算或者是重型的片段着色器。
    将像素计算切换到顶点计算
    降低片段着色器的精度
 2 使用长顶点着色器计算 3D 模型。如果顶点着色器是瓶颈，请减少指令数量，以提高性能。如果片段着色器是瓶颈，则在顶点着色器中进行的优化不会影响性能。
 3 在屏幕上显示很多需要填充大量像素的片段。
 4 将顶点发送给 GPU 并由顶点着色器进行处理。三角形计数会表明每帧绘制的顶点计数。请参阅排除应用程序的性能问题。

资源：
  贴图下载：https://substance3d.adobe.com/assets